/*

Given an array of positive integers. Find the maximum length of Bitonic subsequence. 
A subsequence of array is called Bitonic if it is first strictly increasing, then strictly decreasing.

Input: nums = [1, 2, 5, 3, 2]
Output: 5
Explanation: The sequence {1, 2, 5} is
increasing and the sequence {3, 2} is 
decreasing so merging both we will get 
length 5.



Input: nums = [1, 11, 2, 10, 4, 5, 2, 1]
Output: 6
Explanation: The bitonic sequence 
{1, 2, 10, 4, 2, 1} has length 6.


*/

	int LongestBitonicSequence(vector<int> arr)
	{
	    int n = arr.size();
		vector<int> start(n , 0);
		vector<int> end(n , 0);
		end[n-1] = 1;
		for(int i=n-2;i>=0;i--){
			int maxi = 0;
			for(int j=i+1;j<n;j++){

				if(arr[j]<arr[i]){
					maxi = max(maxi , end[j]);
					// end[i] = end[j] + 1;
					// break;
				}

			}
			end[i] = maxi + 1;
		}

		start[0] = 1;
		for(int i=1;i<n;i++){
			int maxi = 0;
			for(int j=i-1;j>=0;j--){

				if(arr[j]<arr[i]){
					maxi = max(maxi , start[j]);
					// start[i] = start[j] + 1;
					// break;
				}

			}
			start[i] = (maxi + 1);
		}




		for(int i=0;i<n;i++)
			start[i] += end[i];

		sort(start.begin() , start.end());

		// for(int i=0;i<n;i++)
		// 	cout<<start[i]<<" ";
		// cout<<endl;

		return start[n-1]-1;
	}
